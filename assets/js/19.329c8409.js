(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{412:function(s,t,a){"use strict";a.r(t);var e=a(54),n=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"network"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#network"}},[s._v("#")]),s._v(" Network")]),s._v(" "),a("h2",{attrs:{id:"quickstart"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quickstart"}},[s._v("#")]),s._v(" Quickstart")]),s._v(" "),a("p",[a("em",[s._v("(Note: This repository is under active development. Architecture and implementation may change without documentation)")])]),s._v(" "),a("p",[s._v("This is what you'd use to get a node up and running, fast. It assumes that it is starting on a blank ubuntu machine.  It eschews a systemd unit, allowing automation to be up to the user.  It assumes that installing Go is in-scope since Ubuntu's repositories aren't up to date and you'll be needing go to use osmosis.  It handles the Go environment variables because those are a common pain point.")]),s._v(" "),a("p",[a("strong",[s._v("Install go")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" -q -O - https://git.io/vQhTU "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" -s -- --version "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.17")]),s._v(".2\n")])])]),a("p",[s._v("Then exit and re-enter your shell.")]),s._v(" "),a("p",[a("strong",[s._v("Install Osmosis and check that it is on $PATH")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/osmosis-labs/osmosis\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" osmosis\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout v3.1.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("which")]),s._v(" osmosisd\n")])])]),a("p",[a("strong",[s._v("Launch Osmosis")])]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("osmosisd init yourmonikerhere\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" -O ~/.osmosisd/config/genesis.json https://github.com/osmosis-labs/networks/raw/main/osmosis-1/genesis.json\nosmosisd start\n")])])]),a("p",[s._v("More Nodes ==> More Network")]),s._v(" "),a("p",[s._v("More Network ==> Faster Sync")]),s._v(" "),a("p",[s._v("Faster Sync ==> Less Developer Friction")]),s._v(" "),a("p",[s._v("Less Developer Friction ==> More Osmosis")]),s._v(" "),a("p",[s._v("Thank you for supporting a healthy blockchain network and community by running an Osmosis node!")]),s._v(" "),a("h2",{attrs:{id:"joining-mainnet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joining-mainnet"}},[s._v("#")]),s._v(" Joining Mainnet")]),s._v(" "),a("h2",{attrs:{id:"joining-testnet"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#joining-testnet"}},[s._v("#")]),s._v(" Joining Testnet")]),s._v(" "),a("p",[s._v("Start by ensuring your system is up to date")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" update\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" upgrade\n")])])]),a("p",[s._v("Install tools if not already installed (git, gcc, make, ufw, etc.)")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("apt")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" build-essential ufw "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("curl")]),s._v(" jq snapd --yes\n")])])]),a("p",[s._v("Install go")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" -q -O - https://git.io/vQhTU "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v(" -s -- --version "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.17")]),s._v(".2\n")])])]),a("p",[s._v("After installed, open new terminal to prevent issues")]),s._v(" "),a("p",[s._v("Export environmental variables")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'export GOPATH=\"$HOME/go\"'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'export GOBIN=\"$GOPATH/bin\"'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'export PATH=\"$GOBIN:$PATH\"'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.profile\n")])])]),a("p",[s._v("Run the following to clone the osmosis repo")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/osmosis-labs/osmosis\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" osmosis\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout v3.2.0_with_cache\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("install")]),s._v("\n")])])]),a("p",[s._v("You have now installed the Osmosis Daemon (osmosisd). Use osmosisd to initialize your node with the following (replace the NODE_NAME with a name of your choosing):")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("osmosisd init NODE_NAME --chain-id"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("osmosis-testnet-0\n")])])]),a("p",[s._v("We now need to open the config.toml to edit the seed list")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/.osmosisd/config\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("nano")]),s._v(" config.toml\n")])])]),a("p",[s._v('Use page down or arrow keys to get to the line that says seeds = "" and replace it with the following')]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("seeds "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"4eaed17781cd948149098d55f80a28232a365236@testmosis.blockpane.com:26656"')]),s._v("\n")])])]),a("p",[s._v("Then pres Ctrl+O, then enter to save, then Ctrl+X to exit")]),s._v(" "),a("p",[s._v("We will now set up cosmovisor to ensure the upgrade happens flawlessly. To install Cosmovisor:")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" clone https://github.com/cosmos/cosmos-sdk\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" cosmos-sdk\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout v0.42.9\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" cosmovisor\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" cosmovisor/cosmovisor "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GOPATH")]),s._v("/bin/cosmovisor\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("\n")])])]),a("p",[s._v("After this, create the following directories with the following commands")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.osmosisd\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.osmosisd/cosmovisor\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.osmosisd/cosmovisor/genesis\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.osmosisd/cosmovisor/genesis/bin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.osmosisd/cosmovisor/upgrades\n")])])]),a("p",[s._v("Next, run the following commands to set the environment variables")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"# Setup Cosmovisor"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"export DAEMON_NAME=osmosisd"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"export DAEMON_HOME='),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v('/.osmosisd"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"export DAEMON_ALLOW_DOWNLOAD_BINARIES=false"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"export DAEMON_LOG_BUFFER_SIZE=512"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"export DAEMON_RESTART_AFTER_UPGRADE=true"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">>")]),s._v(" ~/.profile\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("source")]),s._v(" ~/.profile\n")])])]),a("p",[s._v("Download and replace the genesis file with the following commands")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/.osmosisd/config\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("wget")]),s._v(" https://github.com/osmosis-labs/networks/raw/unity/v4/osmosis-1/upgrades/v4/testnet/genesis.tar.bz2\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("tar")]),s._v(" -xjf genesis.tar.bz2\n")])])]),a("p",[s._v("Next, copy the current osmosisd binary into the cosmovisor/genesis folder with the following command")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$GOPATH")]),s._v("/bin/osmosisd ~/.osmosisd/cosmovisor/genesis/bin\n")])])]),a("p",[s._v("To check your work, ensure the version of cosmovisor and osmosisd are the same")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("cosmovisor version\nosmosisd version\n")])])]),a("p",[s._v("These two command should both output 3.1.0-23-g517562d")]),s._v(" "),a("p",[s._v("Before we start cosmovisor, lets prep the upgrade to v4.0.0-rc1 with the following commands")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mkdir")]),s._v(" -p ~/.osmosisd/cosmovisor/upgrades/v4/bin\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("/osmosis\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("git")]),s._v(" checkout v4.0.0\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("make")]),s._v(" build\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" build/osmosisd ~/.osmosisd/cosmovisor/upgrades/v4/bin\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("cd")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$HOME")]),s._v("\n")])])]),a("p",[s._v("Use the following command to ensure the validator file is in the gensesis state")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("osmosisd unsafe-reset-all\n")])])]),a("p",[s._v('While we could start cosmovisor now with "cosmovisor start", lets set up a service with the following commands to allow it to run in the background as well as restart automatically if it runs into any problems!')]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"[Unit]\nDescription=Cosmovisor daemon\nAfter=network-online.target\n[Service]\nEnvironment="')]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DAEMON_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("osmosisd"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nEnvironment="')]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DAEMON_HOME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("HOME")]),s._v("}")]),s._v("/.osmosisd"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nEnvironment="')]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DAEMON_RESTART_AFTER_UPGRADE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("true"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nEnvironment="')]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DAEMON_ALLOW_DOWNLOAD_BINARIES")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("false"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nEnvironment="')]),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("DAEMON_LOG_BUFFER_SIZE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("512")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"\nUser='),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("$USER")]),s._v("\nExecStart="),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("${"),a("span",{pre:!0,attrs:{class:"token environment constant"}},[s._v("HOME")]),s._v("}")]),s._v('/go/bin/cosmovisor start\nRestart=always\nRestartSec=3\nLimitNOFILE=4096\n[Install]\nWantedBy=multi-user.target\n"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("cosmovisor.service\n")])])]),a("p",[s._v("Move this new file to the systemd directory")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("mv")]),s._v(" cosmovisor.service /lib/systemd/system/cosmovisor.service\n")])])]),a("p",[s._v("Finally, run the following commands")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl daemon-reload\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl start cosmovisor\n")])])]),a("p",[s._v("Check the status of your service")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sudo")]),s._v(" systemctl status cosmovisor\n")])])]),a("p",[s._v("To see live logs of your service")]),s._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[s._v("journalctl -u cosmovisor -f\n")])])]),a("p",[s._v("The process should initialize and get to block 1122200, where it will automatically upgrade to v4.0.0-rc1")]),s._v(" "),a("h2",{attrs:{id:"relayers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#relayers"}},[s._v("#")]),s._v(" Relayers")])])}),[],!1,null,null,null);t.default=n.exports}}]);