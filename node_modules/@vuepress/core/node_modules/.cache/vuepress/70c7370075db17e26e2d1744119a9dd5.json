{"remainingRequest":"/home/runner/work/osmosis/osmosis/docs/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/runner/work/osmosis/osmosis/docs/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/runner/work/osmosis/osmosis/docs/node_modules/vue-loader/lib/index.js??ref--1-1!/home/runner/work/osmosis/osmosis/docs/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/runner/work/osmosis/osmosis/docs/src/intro/README.md?vue&type=template&id=63083446&","dependencies":[{"path":"/home/runner/work/osmosis/osmosis/docs/src/intro/README.md","mtime":1636786991238},{"path":"/home/runner/work/osmosis/osmosis/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/osmosis/osmosis/docs/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/osmosis/osmosis/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/osmosis/osmosis/docs/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/home/runner/work/osmosis/osmosis/docs/node_modules/@vuepress/markdown-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}